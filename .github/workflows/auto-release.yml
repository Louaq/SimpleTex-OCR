name: 构建与自动发布

on:
  push:
    branches:
      - main
      - master
      - dev
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest]
        # 未来可以添加: macos-latest, ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: 安装依赖
        run: npm ci
      
      - name: 构建应用
        run: npm run build
        env:
          CI: false
        
      - name: 获取版本号
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: 创建NSIS安装包
        run: npm run package
        env:
          CI: false
      
      - name: 清理临时文件并确认最终产物
        run: |
          Write-Host "=== 清理前的文件列表 ==="
          Get-ChildItem -Path release -Recurse -File | Select-Object FullName, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB, 2)}} | Format-Table -AutoSize
          
          Write-Host "`n=== 清理临时目录 ==="
          if (Test-Path -Path "release\win-unpacked") {
            Remove-Item -Path "release\win-unpacked" -Recurse -Force
            Write-Host "已删除 win-unpacked 目录"
          }
          
          if (Test-Path -Path "release\.icon-ico") {
            Remove-Item -Path "release\.icon-ico" -Recurse -Force
            Write-Host "已删除 .icon-ico 目录"
          }
          
          Write-Host "`n=== 最终文件列表 ==="
          Get-ChildItem -Path release -File | Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB, 2)}} | Format-Table -AutoSize
        shell: pwsh
      
      - name: 尝试发布到GitHub
        id: publish
        continue-on-error: true
        run: |
          Write-Host "正在发布安装程序到GitHub..."
          
          # 确保只有安装程序和相关文件
          $installerExists = Test-Path -Path "release\LaTeX*.exe"
          if (-not $installerExists) {
            Write-Host "错误: 安装程序文件不存在，发布失败"
            exit 1
          }
          
          npm run publish
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: false
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ./release/LaTeX*.exe
            ./release/latest.yml
            ./release/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            release/LaTeX*.exe
            release/latest.yml
            release/*.blockmap
