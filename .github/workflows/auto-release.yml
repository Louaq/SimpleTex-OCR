name: 构建与自动发布

on:
  push:
    branches:
      - main
      - master
      - dev
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest]
        # 未来可以添加: macos-latest, ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: 安装依赖
        run: npm ci
      
      - name: 构建应用
        run: npm run build
        env:
          CI: false
        
      - name: 获取版本号
        id: package_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: 创建NSIS安装包
        run: npm run package
        env:
          CI: false
      
      - name: 清理临时文件并确认最终产物
        run: |
          Write-Host "=== 清理前的文件列表 ==="
          Get-ChildItem -Path release -Recurse -File | Select-Object FullName, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB, 2)}} | Format-Table -AutoSize
          
          # 清理临时目录
          Write-Host "`n=== 清理临时目录 ==="
          if (Test-Path -Path "release\win-unpacked") {
            Remove-Item -Path "release\win-unpacked" -Recurse -Force
            Write-Host "已删除 win-unpacked 目录"
          }
          
          if (Test-Path -Path "release\.icon-ico") {
            Remove-Item -Path "release\.icon-ico" -Recurse -Force
            Write-Host "已删除 .icon-ico 目录"
          }
          
          # 重命名安装程序
          $version = "${{ steps.package_version.outputs.version }}"
          Write-Host "`n=== 重命名安装程序 ==="
          $setupFile = Get-ChildItem -Path "release" -Filter "*.exe" | Where-Object { $_.Name -like "LaTeX*" -or $_.Name -like "*-setup-*.exe" } | Select-Object -First 1
          if ($setupFile) {
            $newName = "LaTeX-$version.exe"
            $newPath = Join-Path -Path "release" -ChildPath $newName
            Rename-Item -Path $setupFile.FullName -NewName $newName -Force
            Write-Host "已将 $($setupFile.Name) 重命名为: $newName"
          } else {
            Write-Host "警告: 找不到安装程序文件!"
            Get-ChildItem -Path "release" -File | ForEach-Object { Write-Host " - $($_.Name)" }
          }
          
          # 删除不需要的文件
          Write-Host "`n=== 删除多余文件 ==="
          Get-ChildItem -Path "release" -File | Where-Object { $_.Name -ne "LaTeX-$version.exe" } | ForEach-Object {
            Remove-Item -Path $_.FullName -Force
            Write-Host "已删除文件: $($_.Name)"
          }
          
          Write-Host "`n=== 最终文件列表 ==="
          Get-ChildItem -Path release -File | Select-Object Name, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB, 2)}} | Format-Table -AutoSize
        shell: pwsh
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            ./release/LaTeX-${{ steps.package_version.outputs.version }}.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: LaTeX-installer
          path: |
            release/LaTeX-${{ steps.package_version.outputs.version }}.exe
